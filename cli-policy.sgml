<!doctype debiandoc public "-//DebianDoc//DTD DebianDoc//EN"> <book>
  <title>
    Debian CLI Policy (DRAFT)
  </title>
  
  <author>
    <name>Mirco Bauer</name>
    <email>meebey@meebey.net</email>
  </author>
  <author>
    <name>Brandon Hale</name>
    <email>brandon@smarterits.com</email>
  </author>
  <author>
    <name>Sebastian Dröge</name>
    <email>slomo@ubuntu.com</email>
  </author>
  
  <version>
    Version 0.4.0
  </version>

  <abstract>
    This document lays out basic policies regarding packaging Mono, other
    <qref id="CLR">CLRs</qref> and <qref id="CLI">CLI</qref> based applications/libraries on Debian GNU/Linux.
  </abstract>

  <copyright>
    <copyrightsummary>
      Copyright &copy; 2005-2006 Mirco Bauer, Brandon Hale and Sebastian Dröge.
    </copyrightsummary>
    
    <p>This manual is free software; you may redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the Free
    Software Foundation; either version 2, or (at your option) any later
    version.</p>

    <p>This is distributed in the hope that it will be useful, but without
    any warranty; without even the implied warranty of merchantability or
    fitness for a particular purpose. See the GNU General Public License
    for more details.</p>

    <p>A copy of the GNU General Public License is available as
    /usr/share/common-licenses/GPL in the Debian GNU/Linux distribution or
    on the World Wide Web at the GNU General Public Licence. You can also
    obtain it by writing to the Free Software Foundation, Inc., 59 Temple
    Place - Suite 330, Boston, MA 02111-1307, USA.</p>
  </copyright>

  <toc sect1>

  <chapt id="history">
    <heading>Policy History</heading>
    
    <p>Here are the changes to the Debian CLI Policy document.</p>
    
    <p>
      Changes from 0.3.0 to 0.4.0:
      <list>
        <item><ref id="build-deps">: Added nemerle to the compilers.</item>
        <item><ref id="packaging">: Added a packaging chapter that includes some of the old chapter and some new.</item>
        <item><ref id="gac-library-packaging">: Added informations about signing and policy files.</item>
        <item><ref id="dh_installcligac">: Added stub for the new dh_installcligac script. Must be filled with content soon.</item>
        <item><ref id="file-locations">: Require that files are installed into <file>/usr/lib/package</file> or <file>/usr/lib/cli/package-X.Y</file> now.</item>
      </list>
    </p>    
    <p>
      Changes from 0.2.1 to 0.3.0:
      <list>
        <item><ref id=".NET">: Added URL for the ".NET" term.</item>
        <item><ref id="GAC">: Added explanation of GAC.</item>
        <item><ref id="gac-library-packaging">: Added section for naming of GAC packages.</item>
      </list>
    </p>

    <p>
      Changes from 0.2.0 to 0.2.1:
      <list>
        <item><ref id="cli-common-dev">: Added examples for debhelper and CDBS.</item>
      </list>
    </p>

    <p>
      Changes from 0.1.1 to 0.2.0:
      <list>
        <item><ref id="history">: Added chapter "Policy History"</item>
        <item><ref id="build-deps">: Compiler dependency is no longer strict on
        mono-mcs</item>
        <item><ref id="cli-common-dev">: Note that dh_makeclilibs must be called before
        dh_clideps</item>
        <item><ref id="build-deps">: Moved dh_clideps and dh_makeclilibs into
        their own subsections</item>
        <item><ref id="file-perms">: Added chapter "File Permissions"</item>
        <item><ref id="migrating">: cli-wrapper is now deprecated</item>
        <item><ref id="dll-maps-intro">: Added an external link for
        DllNotFoundException</item>
      </list>
    </p>
  </chapt>
  
  <chapt>
    <heading>Used Terms</heading>
    
    <p>
      The ".NET" area uses an own set of abbreviations, which can
      look confusing to other people.
      Here a short list with their explanations:
    </p>
    
    <sect id="CLI">
      <heading>CLI - Common Language Infrastructure</heading>
      
      <p>
        This is what most people mean when they say ".NET".
        The CLI defines mainly  the virtual machine, bytecode and how everything
        works together and is an <url
        id="http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=36769" name="ISO">
        and <url id="http://www.ecma-international.org/publications/standards/Ecma-335.htm" name="ECMA">
        standard.
      </p>
    </sect>
    
    <sect id="CLR">
      <heading>CLR - Common Language Runtime</heading>
     
      <p>
        The CLR is an implementation of the <qref id="CLI">CLI</qref> (often with a lot of addons/tools
        for developers), like Mono or Microsoft .NET Framework is.
      </p>
    </sect>
    
    <sect id="CIL">
      <heading>CIL - Common Intermediate Language</heading>
      
      <p>
        CIL is the format of the bytecode (for binaries and libraries)
        used by <qref id="CLI">CLI</qref>.
      </p>
    </sect>
    
    <sect id=".NET">
      <heading>".NET" or long "Microsoft .NET Framework"</heading>
      
      <p>
        The word .NET is a marketing word by Microsoft, which is basically a
        CLR with added Microsoft technologies like: ASP.NET, VB.NET,
        System.Windows.Forms, Passport and a lot of other things.
      <p>

      <p>
        <strong>We highly discourage from using any form of the word ".NET", it is
        burdened by copyright and marketing.</strong>  We  advice to use the correct
        term instead, which is usually <qref id="CLI">CLI</qref>.
      </p>

      <p>
        If you really want to use the ".NET" term in a correct form please refer to the
        <url id="http://www.microsoft.com/mscorp/ip/trademarks/netguide.asp" name="Microsoft .NET Guidelines">.
      </p>
    </sect>

    <sect id="GAC">
      <heading>GAC - Global Assembly Cache</heading>

      <p>
        The GAC contains and manages the libraries for the <qref id="CLR">CLR</qref>.
        It allows users to install multiple versions of the same library and load
        the right version when an application is executed.
      </p>
      <p>
        Mono stores the GAC at <file>/usr/lib/mono/gac</file>
      </p>
      <p>
        Portable.NET stores the GAC at <file>/usr/lib/cscc/lib</file>
      </p>
    </sect>
  </chapt>

  <chapt id="packaging">
    <heading>Packaging Policy</heading>

    <p>
      This section describes which additions to the
      <url id="http://www.debian.org/doc/debian-policy/" name="Debian Policy">
      are required for <qref id="CLI">CLI</qref> packages.
    </p>

    <sect id="general-packaging">
      <heading>General Packaging</heading>

      <sect1 id="architecture">
        <heading>Architecture</heading>
        
        <p>
          For packages that consist of 100% managed code "Architecure: all" must be chosen.
        </p>
        <p>
          Packages containing a mix of managed and native code must be "Architecure: any" or
         depending on the specific package also a restricted set of architectures is valid.
        </p>
      </sect1>

      <sect1 id="file-locations">
        <heading>File Locations</heading>
        
        <p>
          The package's applications, libraries and meta-data must be installed in
          <file>/usr/lib/packagename</file>.
        <p>

        <p>
          Libraries that will be installed into the GAC should be in <file>/usr/lib/cli/packagename-X.Y</file> 
          (for more details about the X.Y version see <qref id="gac-naming-versioning">GAC versioning</qref>).
          The often seen <file>/usr/lib/mono/packagename</file> is wrong and should only be used for packages
          by the Mono project.
        </p>
              
        <p>
          Never put "glue" libraries into <file>/usr/lib</file> but move them to 
          <file>/usr/lib/cli/packagename-X.Y</file>, too. When moving the libraries, you also have
          to update the references to the new location (see the
          <qref id="dll-maps-intro">Mono DLL maps</qref> as an example).
        </p>

        <p>
          The only exception here are obviously native libraries that are of any use for
          other packages. They should be packaged according to the <url
          id="http://www.netfort.gr.jp/~dancer/column/libpkg-guide/libpkg-guide.html"
          name="Library Packaging Guide"> or any other policy conform way.
        </p>

        <p>
          For <file>.exe</file> files a <qref id="wrapper-script-example">wrapper script</qref>
          should be installed into <file>/usr/bin</file> to allow normal invocation.
          Never ever install <file>.exe</file> files directly into <file>/usr/bin</file>.
        </p>
      </sect1>

      <sect1 id="file-perms">
        <heading>File Permissions</heading>
     
        <p>
          Source code files (*.cs, *.vb, *.boo, etc) should be non-executable.
        </p>
        <p>
          Library files (*.dll) should be non-executable.
        </p>
        <p>
          Debug symbol files (*.mdb) should be non-executable.
        </p>
        <p>
          Assembly config files (*.config) should be non-executable.
        </p>
        
        <p>
          Application files (*.exe) must have the executable flag (+x) set to be
          compatibile with binfmt (direct invokation like ./foo.exe).
        </p>
        
        <p>
          To insure that the file permissions are right, you should call the
          following at the end of your install target in debian/rules:
          <example>
find debian/ -type f -name "*.dll" -or -name "*.mdb" -or -name "*.cs" -or -name "*.config" | xargs chmod -x
find debian/ -type f -name "*.exe" | xargs chmod +x
          </example>
        </p>        
      </sect1>

      <sect1 id="build-deps">
        <heading>Build Dependencies</heading>
        
        <p>
          At a minimum, CLI packages must build-depend on
          <package>cli-common-dev</package> (&gt;= 0.4.0) and the compiler.
        </p>
        
        <p>
          Current CLI compilers in Debian:
          <list>
            <item>
              C#: <package>mono-mcs</package> (&gt;= 1.0) | c-sharp-compiler
            </item>
            <item>
              C# 2.0: <package>mono-gmcs</package> (&gt;= 1.1.8) | c-sharp-2.0-compiler
            </item>
            <item>
              Nemerle: <package>nemerle</package> (&gt;= 0.9)
            </item>
            <item>
              Boo: <package>boo</package> (&gt;= 0.5.6)
            </item>
          </list>
        </p>
        
        <p>
          Software that access Mono via the C interface (libmono.so) or requires
          the mono.pc file must build-depend also on: libmono-dev (&gt;= 1.0)
        </p>
        
        <p>
          Keep in mind that there are architectures for which no <qref id="CLR">CLR</qref> is
          available. You may have to restrict the Build-Depends to some architectures when your
          package is required on that architectures, too.
        </p>

        <p>
          If your package is Arch: all, you should specify this as Build-Depends-Indep.
          Never put <package>debhelper</package>, <package>cdbs</package> or <package>dpatch</package>
          into Build-Depends-Indep (See the <url
          id="http://www.debian.org/doc/debian-policy/ch-relationships.html#s-sourcebinarydeps"
          name="Debian Policy Manual"> for more informations on this).
        </p>
      </sect1>  
    </sect>

    <sect id="gac-library-packaging">
      <heading>GAC Library Packaging</heading>

      <p>
        These are libraries that are installed into the <qref id="GAC">GAC</qref>.
        They should provide at least provide decent ABI stability and should be
        useful for other packages too.
      </p>

      <sect1 id="gac-naming-versioning">
        <heading>Naming &amp; Versioning</heading>
        
        <p>
          Libraries that are installed into the <qref id="GAC">GAC</qref> must be
          strong-named, i.e. <qref id="signing">signed</qref>.
        </p>
        
        <p>
          Each of the libraries in the <qref id="GAC">GAC</qref> has
          an assembly version number that consists of 4 parts (major, minor, build
          and revision number). When loading libraries from the
          <qref id="GAC">GAC</qref> it is required that all 4 parts and the public
          signing key fingerprint are exactly the same.
        </p>
        
        <p>
          It's general practice and <url
          id="http://msdn.microsoft.com/netframework/programming/deployment/default.aspx?pull=/library/en-us/dndotnet/html/dplywithnet.asp#dplywithnet_version"
          name="recommended"> by Microsoft that a library has to stay ABI compatible when only the
          build and revision number change and the major and minor number stay the same.
        </p>
        
        <p>
          To reflect the ABI stability and prevent
          breakages when a ABI incompatible version is release a similar solution as
          for <url 
          id="http://www.netfort.gr.jp/~dancer/column/libpkg-guide/libpkg-guide.html#naminglibpkg"
          name="native library packages"> is chosen. The major and minor number mirror
          the SONAME version and the resulting package name is <package>libfooX.Y-cil</package>, where X is the
          major and Y the minor number.
        </p>

        <p>
          A notable exception for the naming are assemblies that end on a number (Mono.C5 for example).
          In that case the package should be named <package>libfoo123-X.Y-cil</package> (i.e.
          <package>libmono-c5-0.5-cil</package>) to improve the readability.
	</p>
        
        <p>
          The -cil suffix is chosen to prevent confusion
          with native library packages. You should never use "sharp" in the package
          name as it doesn't represent the language and a <qref id="CLI">CLI</qref>
          library can be used with all <qref id="CLI">CLI</qref> implemented/enabled
          languages like C#, Boo, Nemerle, J#, ASP.NET, VB.NET (<url
          id="http://www.mono-project.com/Languages" name="full list">).
        </p>

        <p>
          To avoid un-necessary renames, existing package names will not be changed but when the ABI changes,
          the new naming scheme must be used.
        </p>
        
        <p>
          When upstream doesn't use the major and minor number to reflect ABI stability
          or breaks ABI with a change in build or revision the package must be renamed
          to <package>libfooA.B.C.D-cil</package> (where A, B, C, D is the complete assembly version) or
          <package>libfooA.B.C-cil</package>, depending where the brekage was and all
          <qref id="gac-policy-files">Policy Files </qref> must be dropped until a new major or minor
          version is released.
        </p>
        
        <p>
          Upstream may use wildcards in the assembly versions (1.2.* for example) which
          are filled by the compiler with a random value. You <em>must</em> replace these wildcards
          with 0 (1.2.0.0 in the example) to make it possible to use
          <qref id="gac-policy-files">Policy Files</qref> and make predictable version numbers.
        </p>
        
        <p>
          It is allowed to put more than one library into one package. But in that case it is required
          that they all have the same version and belong together.
        </p>
      </sect1>

      
      <sect1 id="gac-policy-files">
        <heading>Policy Files</heading>

        <p>
          As explained above a exact match of the version number is required
          to load from the <qref id="GAC">GAC</qref>. To override this behaviour
          and make different versions of ABI compatible library packages really
          ABI compatible you have to use <url
          id="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconcreatingpublisherpolicyfile.asp"
          name="Policy Files">. They have to be called policy.X.Y.foo.dll (where X and Y
          are the major and minor number of the assembly it should be compatible with),
          must be signed with the same signing key as the original assembly and installed
          into the <qref id="GAC">GAC</qref>. For informations how to create them
          look at the site linked above or look at the <qref id="gac-policy-file-example">example</qref>
          below.
        </p>
        
        <p>
          You should only override the <qref id="GAC">GAC</qref> policy when the
          different versions are really ABI compatible. Also you should raise the minimal version
          in the <qref id="clilibs-control-file">clilibs control file</qref> when there were
          new interfaces/classes/methods added.
        </p>
      </sect1>

      <sect1 id="clilibs-control-file">
        <heading>clilibs Control File</heading>

        <p>
          The clilibs control file must be present in all <qref id="GAC">GAC</qref> library
          packages. It can be created with the <qref id="dh_makeclilibs">dh_makeclilibs</qref>
          helper script and has a format similar to the shlibs file created by <manref name="dh_makeshlibs"
          section="1"> and also a similar use: it is used by <qref id="dh_clideps">dh_clideps</qref>
          to find the correct dependencies.
        </p>
        
        <p>
          You should always set the least required version of the library here.
        </p>
      </sect1>

      <sect1 id="pkg-config-file">
        <heading>pkg-config File</heading>
        
        <p>
          Many libraries deliver a pkg-config file, which is a helper for other libraries or applications to
          link against that library.
        </p>

        <p>
          All GAC library packages should have a pkg-config file located in <file>/usr/lib/pkgconfig</file>.
          The filename must look like: <file>package-X.Y.pc</file>, notice the versioning in it.
          The version must reflect the same X.Y version as the package name has.
          Also there should be a symlink without the version to the latest version, like:
          <file>package.pc</file> -> <file>package-X.Y.pc</file>
        </p>
      </sect1>

      <sect1 id="signing">
        <heading>Signing</heading>
        <p>
          When installing libraries into the <qref id="GAC">GAC</qref> signing
          is required. The signing key can either be supplied by upstream or you
          have to create your own one using the <file>sn</file> utility. This
          must be put into your source package and used for all following versions of the library.
        </p>
      </sect1>
    </sect>
    
    <sect id="non-gac-library-packaging">
      <heading>non-GAC Library Packaging</heading>

      <p>
        This includes libraries that are in no way ABI stable, may be not strong-named
        and are usually in an early stage of development. They must not include a clilibs
        control file!
      </p>

      <sect1 id="non-gac-naming">
        <heading>Naming</heading>

        <p>
          The package should be named libfoo-cil (without a version in the package name)
          and should not be installed into the <qref id="GAC">GAC</qref> but only
          into <file>/usr/lib/packagename</file>.
        </p>

        <p>
          Applications using them must copy the libraries they need into their own
          application directory. You can compare this with static linking of native libraries.
        </p>
      </sect1>      
    </sect>
  </chapt>
  

  <chapt id="mono">
    <heading>Mono Specifics</heading>
    
    <p>
      This section will offer workarounds to common problems encountered when
      packaging Mono-specific applications for Debian.
    </p>
    <sect>
      <heading>Naming</heading>
      
      <p>
        The official name of the Mono Project is: Mono, mono:: or mono.
        To keep it unified (more transparent to the user) it should be <em>always
        </em> called "Mono", not MONO, not mono, not mono:: even no
        mixing with .NET in it. The explanation of Mono goes into the package
        <em>long</em> description.
      </p>
    </sect>

    <sect>
      <heading>DLL Maps</heading>
      
      <p>
        Often times, upstream software developers are not
        packagers, and vice versa. Developers do not necessarily test their
        software with packaging issues in mind. The most common problem we
        see from this are missing dll exceptions.
      </p>

      <sect1 id="dll-maps-intro">
        <heading>Introduction</heading>
        
        <p>
          When Mono code invokes an external library, it usually calls
          something like [DllImport("foo")]. "foo" is expanded to libfoo.so, and
          searched for in your library path.
        </p>

        <p>
          In Debian and some other binary Linux distributions, packages are
          split into runtime and -dev packages. Since the versioned library
          libfoo.so.X is usually used at runtime, and .so is a symlink only used
          at build time, .so is moved to the -dev package.
        </p>

        <p>
          When packaging an application which uses libfoo, we don't want
          normal users to need to need the -dev packages just to run the
          application. As you saw above, however, Mono defaults to looking for
          the unversioned .so, which is unavailable in the runtime packages.
        </p>

        <p>
          When the dll map is missing or upstream forgot the dllmap, it will
          result in a <url id="http://www.mono-project.com/DllNotFoundException"
          name="DllNotFoundException">. This will stop the execution of the
          program.
        </p>
      </sect1>
      
      <sect1>
        <heading>Solution</heading>
          
        <p>
          We can fix this by creating a dll map to the exe or dll that is
          trying to invoke libfoo.
          If libfoo is invoked by the dll bar.dll, we will create an xml file,
          bar.dll.config to tell Mono which .so we really want to load at runtime.
          bar.dll.config should be installed to the same directory as bar.dll.
        </p>

        <p>
          <example>
          &lt;configuration&gt;
          &lt;dllmap dll="foo" target="libfoo.so.0"/&gt;
          &lt;/configuration&gt;
          </example>
        </p>

        <p>
          A config file can contain as many dllmap directives as are needed.
          If the upstream developer already ships a config file, but it is
          incomplete, you should create a patch against it in your package.
        </p>

        <p>
          Most Mono software developers are very helpful people, and will
          readily accept patches to solve this type of bug if you bring it to
          their attention. Please be sure to inform them of all these changes.
        </p>
      </sect1>
    </sect>
    
    <sect>
      <heading>MONO_SHARED_DIR</heading>
      
      <p>
        The Mono runtime uses a shared directory, by default
        <file>~/.wapi</file>. This directory will be created/used when any CLI
        application is executed (like the C# compiler mcs).
      </p>
      
      <p>
        Here comes 2 problems with it:
        <list>
          <item>In an autobuilder environment often does no home directory
          exist.</item>
          <item>Mono uses the wrong home directory when running within fakeroot
          (it tries <file>/root/.wapi</file> instead of <file>$HOME/.wapi
          </file>).</item>
        </list>
      </p>
      
      <p>
        Means when you don't set MONO_SHARED_DIR explicitly, the package
        building will fail! Applications will either hang, die with strange Mono
        runtime errors or segfault (for instance dh_clideps or dh_makeclideps,
        they use monodis).
        So change the MONO_SHARED_DIR by calling
        <example>
        export MONO_SHARED_DIR=$(CURDIR)
        </example>
        in the debian/rules file.
      </p>
      <p>
        The clean target should later remove $(MONO_SHARED_DIR)/.wapi.
        For more information what this .wapi directory is used for, please take
        a look at <manref name="mono" section="1">.
      </p>
    </sect>
  </chapt>

  <chapt id="pnet">
    <heading>DotGNU Portable.NET Specifics</heading>
    
    <p>
      This section will offer workarounds to common problems encountered when
      packaging DotGNU Portable.NET-specific applications for Debian.
    </p>
    <sect>
      <heading>Naming</heading>
      
      <p>
        The official name of the DotGNU Portable.NET project is exactly that.
        To keep it unified (more transparent to the user) it should be <em>always
        </em> called "DotGNU Portable.NET", not pnet, not Portable.NET.
        The explanation of DotGNU Portable.NET goes into the package
        <em>long</em> description.
      </p>
    </sect>
  </chapt>

  <chapt id="appendix">
    <heading>Appendix</heading>
    <sect id="cli-common-dev">
      <heading>Helper Scripts: cli-common-dev</heading>
      <p>
        When using cli-common-dev and the included dh_* scripts packages must
        build-depend on <package>cli-common-dev</package> (&gt;= 0.4.0)
        (this version may change later, when cli-common-dev has changes which
        are required to be used by all CLI packages, the CLI Policy version will
        represent such change).
      </p>
      <sect1 id="dh_makeclilibs">
        <heading>dh_makeclilibs</heading>
        <p>
          dh_makeclilibs is used to create the <qref id="clilibs-control-file">clilibs
          control files</qref> which are used later by dh_clideps for this or other
          packages. It must only be used when your package contains libraries
          that other packages may link against.
        </p>
        <p>
          It has the same use (and very similar) parameters as dh_makeshlibs. You
          should always use a as loose minimal version as possible and a as strict
          minimal version as necessary.
        </p>
        <p>
          <em>It must be called before dh_clideps.</em>
        </p>
        
        <p>
          See <manref name="dh_makeclilibs" section="1"> for details
        </p>
      </sect1>
      <sect1 id="dh_clideps">
        <heading>dh_clideps</heading>
        <p>
          dh_clideps is used to get the native and managed dependencies
          of the packages. It uses the <qref id="clilibs-control-file">clilibs
          control files</qref>, the .config of the assemblies and the shlibs
          files created by dh_makeshlibs. The dependencies are put into ${cli:Depends}.
        </p>

        <p>
          <em>Be sure to run dh_shlibdeps before dh_clideps is called. Also run dh_makeshlibs
          and dh_makeclilibs before dh_clideps!</em> Otherwise, if two binary packages from
          the same source package depend on one another, dh_clideps will not be able to
          determine depedencies.
        </p>
        
        <p>
          dh_clideps can remove duplicates created by running dh_clideps and dh_shlibsdeps
          by using the -d parameter.
        </p>
        
        <p>
          See <manref name="dh_clideps" section="1"> for details
        </p>
      </sect1>
      <sect1 id="dh_installcligac">
        <heading>dh_installcligac</heading>
        <p>TODO</p>
      </sect1>
    </sect>

    <sect id="examples">
      <heading>Examples</heading>
      <sect1 id="debhelper-example">
        <heading>debhelper Example</heading>
        <p>
          For binary-arch packages:
          <example>
binary-arch: build install
	...
	dh_shlibdeps -a
	dh_makeclilibs -a -V
	dh_clideps -a -d
	dh_installgac -a
	...
          </example>
          For binary-indep packages:
          <example>
binary-indep: build install
	...
	dh_makeclilibs -i -V
	dh_clideps -i
	dh_installcligac -i
	...
          </example>
        </p>
      </sect1>

      <sect1 id="cdbs-example">
        <heading>cdbs Example</heading>

        <p>
          <example>
common-binary-predeb-arch common-binary-predeb-indep::
	dh_shlibdeps
	dh_makeclilibs -V
	dh_clideps -d
	dh_installcligac
          </example>
        </p>
      </sect1>

      <sect1 id="wrapper-script-example">
        <heading>Executable Wrapper Script Example</heading>

        <p>
          <example>
#!/bin/sh
exec /usr/bin/cli /usr/lib/package/package.exe "$@"
          </example>
        </p>
      </sect1>

      <sect1 id="api-compat-example">
        <heading>API Compatibility Check Example</heading>

        <p>TODO</p>
      </sect1>

      <sect1 id="gac-policy-file-example">
        <heading>GAC Policy File Example</heading>

        <p>TODO</p>
      </sect1>
    </sect>

    <sect id="gac-late-installation">
      <heading>Late installation into the GAC</heading>

      <p>
        This is on purpose in the Appendix and with that not part of the policy (yet)!
      </p>

      <p>
        For the actual installing into the <qref id="GAC">GAC</qref> see
        <qref id="dh_installcligac">dh_installcligac</qref> and <manref name="gacutil" section="1">.
      </p>
        
      <p>
        You should never (except in special cases, like CLRs) install files directly into the <qref id="GAC">GAC</qref>
        but leave it to the postinst and prerm scripts to install the libraries into all available
        <qref id="GAC">GACs</qref>.
      </p>
    </sect>

    <sect id="migrating">
      <heading>Migrating Existing Packages</heading>
      
      <p>
        Many CLI packages already exist in Debian, or are in ITP, and conform to
        the deprecated <url id="http://wiki.debian.net/?MonoConventions"
        name="Mono Conventions">.
      </p>

      <p>
        Any <file>debian/rules</file> hacks or patches that exist to redirect
        files to <file>/usr/share/dotnet</file> should be removed, and adjusted
        according to upstream file locations (<file>/usr/lib</file>). See
        <url id="http://wiki.debian.net/?MonoDebianPlan" name="Mono Debian Plan">
        for the rationale behind this change.
      </p>

      <p>
        Also, be sure to replace references to dh_netdepends, dh_makenetlibs, and
        ${net:Depends} with the CLI functions detailed above.
      </p>

      <p>
        Please remove any build-deps on <package>mono-jit</package>,
        <package>mono-mint</package>, <package>mono-utils</package> (this one had
        the dh_* helper scripts which are now in <package>cli-common</package>)
        and <package>libmono-dev</package> (use this one only if the package
        really links against <package>mono</package> or requires the mono.pc
        file).
      </p>
    
      <p>
        Do not use the cli-wrapper (<file>/usr/bin/cli-wrapper</file>) anymore.
        It is deprecated and will be removed soon! Either use the upstream shell
        script to invoke the application or write one, which calls
        <file>/usr/bin/mono</file> or <file>/usr/bin/cli</file> (if it runs also
        on other CLRs like <url id="http://www.southern-storm.com.au/portable_net.html"
        name="Portable.NET">).
      </p>
    </sect>
  </chapt>
</book>
